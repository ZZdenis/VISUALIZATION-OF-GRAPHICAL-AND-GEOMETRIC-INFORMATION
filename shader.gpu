

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
varying vec3 varyingVertex;
varying vec3 varyingNormal;

void main() {
    varyingVertex = vertex;
    varyingNormal = normal;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 varyingVertex;
varying vec3 varyingNormal;
uniform vec3 position;
uniform vec4 color;
void main() {
    vec3 N = normalize(varyingNormal);
    vec3 L = normalize(position - varyingVertex);
    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(-varyingVertex); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 50.0);
    }
    vec4 shadedColor = vec4(color.rgb*0.1+lambertian*color.rgb+vec3(1.0)*specular,1.0);
    gl_FragColor = vec4(varyingNormal,1.0);
    gl_FragColor = shadedColor;
    if(color.a<0.0){
        gl_FragColor=vec4(1.0);
    }
}`;