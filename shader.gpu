

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texture;
uniform mat4 ModelViewProjectionMatrix;
varying vec3 varyingVertex;
varying vec3 varyingNormal;
varying vec2 varyingTexture;
uniform vec2 p;
uniform float r;

mat4 translation(vec2 t) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = t.x;
    dst[3][ 1] = t.y;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

mat4 rotation(float angleInRadians) {
    mat4 dst;
    float c = cos(angleInRadians);
    float s = sin(angleInRadians);

    dst[0][0] = c;
    dst[0][ 1] = s;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = -s;
    dst[1][ 1] = c;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

void main() {
    varyingVertex = vertex;
    varyingNormal = normal;
    vec4 tA = translation(-p)*vec4(texture,0.,1.);
    vec4 tB = rotation(r)*tA;
    vec4 tC = translation(p)*tB;
    varyingTexture = tC.xy;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 varyingVertex;
varying vec3 varyingNormal;
varying vec2 varyingTexture;
uniform vec3 position;
uniform vec4 color;
uniform sampler2D tmu;
void main() {
    vec3 N = normalize(varyingNormal);
    vec3 L = normalize(position - varyingVertex);
    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(-varyingVertex); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 50.0);
    }
    vec4 shadedColor = vec4(color.rgb*0.1+lambertian*color.rgb+vec3(1.0)*specular,1.0);
    gl_FragColor = vec4(varyingNormal,1.0);
    gl_FragColor = shadedColor;
    gl_FragColor = texture2D(tmu,varyingTexture);
    if(color.a<0.0){
        gl_FragColor=vec4(0.,0.,1.0,1.0);
    }
}`;